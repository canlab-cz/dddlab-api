/**
 *  Copyright (c) 2022 Canlab s.r.o
 *
 */
#include "dddlabapi.h"
#include <iostream>

namespace dddlabapi
{

	/**************************************************************************************************************************/

	constexpr auto base_url = "https://tachograph.online/api/v1";

	constexpr auto base_url_v2 = "http://tachograph.online:8000/api/v2";

	/**************************************************************************************************************************/

	size_t write_to_string(void* ptr, size_t size, size_t count, void* stream)
	{
		((std::string*)stream)->append((char*)ptr, 0, size * count);
		return size * count;
	}

	/**
 * @brief 1.step -> upload file to our server (file will be autodeleted after 24 hours)
 *
 * @param jwt_token token generated by Canlab s.r.o. required
 * @param filepath path to file
 * @return std::pair<long, std::string>
 */
	std::pair<long, std::string> uploadFile(std::string jwt_token, std::string filepath)
	{

		std::string url(base_url);
		url += "/upload_files";
		std::string bearer_token = "Authorization: Bearer " + jwt_token;
		std::string response;

		long http_code = 0;
		CURL* curl;
		CURLcode res;

		curl = curl_easy_init();
		if (curl)
		{
			curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
			curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
			curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
			curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
			struct curl_slist* headers = NULL;
			headers = curl_slist_append(headers, bearer_token.c_str());
			curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
			curl_mime* mime;
			curl_mimepart* part;
			mime = curl_mime_init(curl);
			part = curl_mime_addpart(mime);
			curl_mime_name(part, "file");
			curl_mime_filedata(part, filepath.c_str());
			curl_easy_setopt(curl, CURLOPT_MIMEPOST, mime);

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
			res = curl_easy_perform(curl);
			curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
			curl_mime_free(mime);
		}
		curl_easy_cleanup(curl);
		return std::make_pair(http_code, response);
	}


	/**************************************************************************************************************************/
	/**************************************************************************************************************************/
		/**
	 * @brief 1.step -> upload file to our server (file will be autodeleted after 24 hours)
	 *
	 * @param jwt_token token generated by Canlab s.r.o. required
	 * @param filepath path to file
	 * @return std::pair<long, std::string>
	 */
	std::pair<long, std::string> uploadFileV2(std::string jwt_token, std::string filepath)
	{

		std::string url(base_url_v2);
		url += "/upload_files";
		std::string bearer_token = "Authorization: Bearer " + jwt_token;
		std::string response;

		long http_code = 0;
		CURL* curl;
		CURLcode res;

		curl = curl_easy_init();
		if (curl)
		{
			curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
			curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
			curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
			curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
			struct curl_slist* headers = NULL;
			headers = curl_slist_append(headers, bearer_token.c_str());
			curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
			curl_mime* mime;
			curl_mimepart* part;
			mime = curl_mime_init(curl);
			part = curl_mime_addpart(mime);
			curl_mime_name(part, "file");
			curl_mime_filedata(part, filepath.c_str());
			curl_easy_setopt(curl, CURLOPT_MIMEPOST, mime);

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
			res = curl_easy_perform(curl);
			curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
			curl_mime_free(mime);
		}
		curl_easy_cleanup(curl);
		return std::make_pair(http_code, response);
	}
	/**************************************************************************************************************************/
	/**************************************************************************************************************************/

		/**
	 * @brief  Converts uploaded file to readable HTML with charts and tables.
	 * see uploadFile()
	 *
	 * @param jwt_token token generated by Canlab s.r.o.
	 * @param filename path to file returned by
	 * @param local localization of converted HTML ( only "cs"_CZ and "en"_US available)
	 * @return std::pair<long, std::string> returns http return code and response (string with HTML)
	 */
	std::pair<long, std::string> getHTML(std::string jwt_token, std::string filename, std::string local)
	{
		std::string filepath = "data=" + filename + ";";
		std::string param = (filepath + local).c_str();
		std::string url(base_url);
		url += "/ddd2html?" + param;
		std::string bearer_token = "Authorization: Bearer " + jwt_token;

		long http_code = 0;
		std::string response;
		CURL* curl;
		CURLcode res;

		curl = curl_easy_init();
		if (curl)
		{
			curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
			curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
			curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
			curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
			struct curl_slist* headers = NULL;
			headers = curl_slist_append(headers, bearer_token.c_str());
			curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
			res = curl_easy_perform(curl);
			curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
		}
		curl_easy_cleanup(curl);
		return std::make_pair(http_code, response);
	}
	/**************************************************************************************************************************/
	/**************************************************************************************************************************/

		/**
	 * @brief 2.step --> Get the Analysis Preview object
	 *
	 * @param jwt_token
	 * @param filename
	 * @return std::pair<long, std::string>
	 */
	std::pair<long, std::string> getAnalysisPreview(std::string jwt_token, std::string filename)
	{
		std::string file_param = "file=" + filename;
		std::string url(base_url);
		url += "/preview?" + file_param;
		std::string bearer_token = "Authorization: Bearer " + jwt_token;

		long http_code = 0;
		std::string response;
		CURL* curl;
		CURLcode res;

		curl = curl_easy_init();
		if (curl)
		{
			curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
			curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
			curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
			curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
			struct curl_slist* headers = NULL;
			headers = curl_slist_append(headers, bearer_token.c_str());
			curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
			res = curl_easy_perform(curl);
			curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
		}
		curl_easy_cleanup(curl);
		return std::make_pair(http_code, response);
	}

	/**
 * @brief converts bool to string true , false
 *
 * @param val
 * @return std::string
 */
	std::string strToBool(bool val)
	{
		return val ? "true" : "false";
	}
	/**************************************************************************************************************************/
	/**************************************************************************************************************************/

		/**
	 * @brief 3.step --> Get the Analysis object
	 *
	 * @param jwt_token token generated by Canlab s.r.o. with analysis scope
	 * @param filename path to file returned by
	 * @param card_id specify card id of driver you want evaluate is returned in preview
	 * @param period_begin eval period begin -- getAnalysisPreview() gives available data
	 * @param period_end  eval period end
	 * @param summ_daily adds to output summary data tables
	 * @param summ_weekly summary weekly
	 * @param summ_monthly summary monthly
	 * @param workshifts adds to output worksfits data tables
	 * @param rests rest data tables
	 * @param activities activity data table
	 * @return std::pair<long, std::string>
	 */
	std::pair<long, std::string> getAnalysis(std::string jwt_token, std::string filename, std::string card_id, std::string period_begin, std::string period_end, bool summ_daily, bool summ_weekly, bool summ_monthly, bool workshifts, bool rests, bool activities)
	{
		std::string param = "card-id=" + card_id;
		param.append("&period-begin=" + period_begin);
		param.append("&period-end=" + period_end);
		param.append("&summary-daily=" + strToBool(summ_daily));
		param.append("&summary-weekly=" + strToBool(summ_weekly));
		param.append("&summary-monthly=" + strToBool(summ_monthly));
		param.append("&workshifts=" + strToBool(workshifts));
		param.append("&activities=" + strToBool(activities));
		param.append("&file=" + filename);

		std::string url(base_url);
		url += "/analysis?" + param;
		std::string bearer_token = "Authorization: Bearer " + jwt_token;

		long http_code = 0;
		std::string response;
		CURL* curl;
		CURLcode res;

		curl = curl_easy_init();
		if (curl)
		{
			curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
			curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
			curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
			curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
			struct curl_slist* headers = NULL;
			headers = curl_slist_append(headers, bearer_token.c_str());
			curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
			res = curl_easy_perform(curl);
			curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
		}
		curl_easy_cleanup(curl);
		return std::make_pair(http_code, response);
	}

	/**************************************************************************************************************************/
	/**************************************************************************************************************************/
		/**
	 * @brief  Converts uploaded file to readable HTML with charts and tables.
	 * see uploadFile()
	 *
	 * @param jwt_token token generated by Canlab s.r.o.
	 * @param filename path to file returned by
	 * @param local localization of converted HTML ( only "cs"_CZ and "en"_US available)
	 * @return std::pair<long, std::string> returns http return code and response (string with HTML)
	 */
	std::pair<long, std::string> getHTMLV2(std::string jwt_token, std::string filename, std::string local)
	{
		std::string param = "data=" + filename;
		param.append("&local=" + local);
		std::string url(base_url_v2);
		url += "/ddd2html?" + param;
		std::string bearer_token = "Authorization: Bearer " + jwt_token;

		long http_code = 0;
		std::string response;
		CURL* curl;
		CURLcode res;

		curl = curl_easy_init();
		if (curl)
		{
			curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
			curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
			curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
			curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
			struct curl_slist* headers = NULL;
			headers = curl_slist_append(headers, bearer_token.c_str());
			curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
			res = curl_easy_perform(curl);
			curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);
		}
		curl_easy_cleanup(curl);
		return std::make_pair(http_code, response);
	}

}
